{
  "openapi": "3.0.0",
  "paths": {
    "/mqtt/bridge/config": {
      "get": {
        "tags": ["Bridge"],
        "summary": "Returns all MQTT broker bridge configurations",
        "responses": {
          "200": {
            "$ref": "#/components/responses/200MqttBridgeMulti"
          }
        }
      },
      "post": {
        "tags": ["Bridge"],
        "summary": "Creates MQTT broker bridge",
        "responses": {
          "201": {
            "$ref": "#/components/responses/200MqttBridge"
          },
          "422": {
            "$ref": "#/components/responses/422response"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/mqtt_bridge_single_options"
                  }
                },
                "required": ["data"]
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Bridge"],
        "summary": "Updates the specified MQTT broker bridge configurations",
        "responses": {
          "200": {
            "$ref": "#/components/responses/200MqttBridgeMulti"
          },
          "404": {
            "$ref": "#/components/responses/404response"
          },
          "422": {
            "$ref": "#/components/responses/422response"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/mqtt_bridge_options"
                    }
                  }
                },
                "required": ["data"]
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Bridge"],
        "summary": "Deletes the specified MQTT broker bridge configurations",
        "responses": {
          "200": {
            "$ref": "#/components/responses/200deleted_multi"
          },
          "404": {
            "$ref": "#/components/responses/404response"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/delete_multi"
        }
      },
      "x-web": {
        "menu": ["Services", "MQTT", "Broker"],
        "hw_tags": {
          "is_access_point": false,
          "is_switch": false
        },
        "name": "MQTT"
      }
    },
    "/mqtt/bridge/config/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "Configuration MQTT broker bridge identifier"
        }
      ],
      "get": {
        "tags": ["Bridge"],
        "summary": "Returns the specified MQTT broker bridge",
        "responses": {
          "200": {
            "$ref": "#/components/responses/200MqttBridge"
          },
          "404": {
            "$ref": "#/components/responses/404response"
          }
        }
      },
      "put": {
        "tags": ["Bridge"],
        "summary": "Updates the specified MQTT broker bridge configuration",
        "responses": {
          "200": {
            "$ref": "#/components/responses/200MqttBridge"
          },
          "404": {
            "$ref": "#/components/responses/404response"
          },
          "422": {
            "$ref": "#/components/responses/422response"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/mqtt_bridge_single_options"
                  }
                },
                "required": ["data"]
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Bridge"],
        "summary": "Deletes the specified MQTT broker bridge configuration",
        "responses": {
          "200": {
            "$ref": "#/components/responses/200deleted"
          },
          "404": {
            "$ref": "#/components/responses/404response"
          }
        }
      },
      "post": {
        "summary": "Uploads MQTT bridge certificate files",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Operation status."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "path": {
                          "type": "string",
                          "description": "Uploaded file path."
                        }
                      }
                    }
                  },
                  "required": ["success", "data"]
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/422response"
          }
        },
        "tags": ["Bridge"],
        "description": "",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "option": {
                    "type": "string",
                    "enum": ["bridge_cafile", "bridge_certfile", "bridge_keyfile"]
                  },
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": ["option", "file"]
              }
            }
          }
        }
      },
      "x-web": {
        "menu": ["Services", "MQTT", "Broker"],
        "hw_tags": {
          "is_access_point": false,
          "is_switch": false
        },
        "name": "MQTT"
      }
    },
    "/mqtt/bridge/{id}/topics/config": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "Configuration MQTT Broker Bridge identifier (ID)"
        }
      ],
      "post": {
        "summary": "Creates a new MQTT Broker Bridge Topic configuration",
        "responses": {
          "201": {
            "$ref": "#/components/responses/200_mqtt_broker_topic_one"
          },
          "404": {
            "$ref": "#/components/responses/404response"
          },
          "422": {
            "$ref": "#/components/responses/422response"
          }
        },
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/req_body_mqtt_broker_topic_one"
              }
            }
          }
        },
        "tags": ["Broker Bridge Topic"]
      },
      "x-web": {
        "menu": ["Services", "MQTT", "Broker"],
        "hw_tags": {
          "is_access_point": false,
          "is_switch": false
        },
        "name": "MQTT"
      }
    },
    "/mqtt/bridge/topics/config": {
      "get": {
        "summary": "Returns MQTT Broker Bridge Topic configurations",
        "tags": ["Broker Bridge Topic"],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200_mqtt_broker_topic_multi"
          }
        },
        "description": ""
      },
      "put": {
        "summary": "Updates the selected MQTT Broker Bridge Topic configurations",
        "responses": {
          "200": {
            "$ref": "#/components/responses/200_mqtt_broker_topic_multi"
          },
          "404": {
            "$ref": "#/components/responses/404response"
          },
          "422": {
            "$ref": "#/components/responses/422response"
          }
        },
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/req_body_mqtt_broker_topic_multi"
              }
            }
          }
        },
        "tags": ["Broker Bridge Topic"]
      },
      "delete": {
        "summary": "Deletes the selected MQTT Broker Bridge Topic configurations",
        "responses": {
          "200": {
            "$ref": "#/components/responses/200deleted_multi"
          },
          "404": {
            "$ref": "#/components/responses/404response"
          }
        },
        "description": "",
        "requestBody": {
          "$ref": "#/components/requestBodies/delete_multi"
        },
        "tags": ["Broker Bridge Topic"]
      },
      "x-web": {
        "menu": ["Services", "MQTT", "Broker"],
        "hw_tags": {
          "is_access_point": false,
          "is_switch": false
        },
        "name": "MQTT"
      }
    },
    "/mqtt/bridge/topics/config/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "Configuration MQTT Broker Bridge Topic identifier (ID)"
        }
      ],
      "get": {
        "summary": "Returns the selected MQTT Broker Bridge Topic configuration",
        "tags": ["Broker Bridge Topic"],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200_mqtt_broker_topic_one"
          },
          "404": {
            "$ref": "#/components/responses/404response"
          }
        },
        "description": ""
      },
      "put": {
        "summary": "Updates the selected MQTT Broker Bridge Topic configuration",
        "responses": {
          "200": {
            "$ref": "#/components/responses/200_mqtt_broker_topic_one"
          },
          "404": {
            "$ref": "#/components/responses/404response"
          },
          "422": {
            "$ref": "#/components/responses/422response"
          }
        },
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/req_body_mqtt_broker_topic_one"
              }
            }
          }
        },
        "tags": ["Broker Bridge Topic"]
      },
      "delete": {
        "summary": "Deletes the selected MQTT Broker Bridge Topic configuration",
        "responses": {
          "200": {
            "$ref": "#/components/responses/200deleted"
          },
          "404": {
            "$ref": "#/components/responses/404response"
          }
        },
        "description": "Deletes MQTT Broker Bridge Topic configuration",
        "tags": ["Broker Bridge Topic"]
      },
      "x-web": {
        "menu": ["Services", "MQTT", "Broker"],
        "hw_tags": {
          "is_access_point": false,
          "is_switch": false
        },
        "name": "MQTT"
      }
    }
  },
  "components": {
    "responses": {
      "200MqttBridge": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Operation status"
                },
                "data": {
                  "$ref": "#/components/schemas/mqtt_bridge_options_resp"
                }
              },
              "required": ["success", "data"]
            }
          }
        }
      },
      "200MqttBridgeMulti": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Operation status"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/mqtt_bridge_options_resp"
                  }
                }
              },
              "required": ["success", "data"]
            }
          }
        }
      },
      "200_mqtt_broker_topic_one": {
        "description": "Example response",
        "content": {
          "application/json": {
            "schema": {
              "description": "",
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Operation status"
                },
                "data": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Configuration ID"
                        }
                      }
                    },
                    {
                      "$ref": "#/components/schemas/mqtt_broker_topic"
                    }
                  ],
                  "required": ["id"]
                }
              },
              "required": ["success", "data"]
            }
          }
        }
      },
      "200_mqtt_broker_topic_multi": {
        "description": "Example response",
        "content": {
          "application/json": {
            "schema": {
              "description": "",
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Operation status"
                },
                "data": {
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Configuration ID"
                          }
                        }
                      },
                      {
                        "$ref": "#/components/schemas/mqtt_broker_topic"
                      }
                    ],
                    "required": ["id"]
                  }
                }
              },
              "required": ["success", "data"]
            }
          }
        }
      }
    },
    "schemas": {
      "mqtt_bridge_single_options": {
        "type": "object",
        "properties": {
          "client_enabled": {
            "type": "string",
            "description": "Enable connection to remote bridge",
            "enum": ["0", "1"],
            "format": "is_bool",
            "x-web": {
              "pretty": "Enable",
              "input-type": "switch"
            }
          },
          "connection_name": {
            "type": "string",
            "description": "Connection name",
            "format": "nospace",
            "maxLength": 64,
            "x-web": {
              "pretty": "Connection name",
              "input-type": "input",
              "unique": true
            }
          },
          "bridge_protocol_version": {
            "type": "string",
            "enum": ["mqttv31", "mqttv311"],
            "description": "Version of the MQTT protocol",
            "x-web": {
              "pretty": "Protocol version",
              "input-type": "select",
              "enum-pretty": {
                "mqttv31": "3.1",
                "mqttv311": "3.1.1"
              }
            }
          },
          "remote_addr": {
            "type": "string",
            "description": "Select remote bridge address",
            "format": "host",
            "x-web": {
              "pretty": "Remote address",
              "input-type": "input"
            }
          },
          "remote_port": {
            "type": "string",
            "description": "Select remote port",
            "format": "port",
            "x-web": {
              "pretty": "Remote port",
              "input-type": "input"
            }
          },
          "use_remote_tls": {
            "type": "string",
            "description": "Select to use TLS/SSL for remote connection",
            "enum": ["0", "1"],
            "format": "is_bool",
            "x-web": {
              "pretty": "Use remote TLS/SSL",
              "input-type": "switch"
            }
          },
          "device_brg_files": {
            "type": "string",
            "description": "Certificate files from device"
          },
          "bridge_cafile": {
            "type": "string",
            "description": "Bridge CA file",
            "format": "file_validation",
            "x-web": {
              "pretty": "Bridge CA file",
              "input-type": "input",
              "depends": [
                {
                  "use_remote_tls": "1"
                }
              ]
            }
          },
          "bridge_cafile:file_size": {
            "description": "Uploaded file size in bytes.",
            "type": "number",
            "readOnly": true
          },
          "bridge_certfile": {
            "type": "string",
            "description": "Bridge certificates file",
            "format": "file_validation",
            "x-web": {
              "pretty": "Bridge certificate file",
              "input-type": "input",
              "depends": [
                {
                  "use_remote_tls": "1"
                }
              ]
            }
          },
          "bridge_certfile:file_size": {
            "description": "Uploaded file size in bytes.",
            "type": "number",
            "readOnly": true
          },
          "bridge_keyfile": {
            "type": "string",
            "description": "Bridge key file",
            "format": "file_validation",
            "x-web": {
              "pretty": "Bridge key file",
              "input-type": "input",
              "depends": [
                {
                  "use_remote_tls": "1"
                }
              ]
            }
          },
          "bridge_keyfile:file_size": {
            "description": "Uploaded file size in bytes.",
            "type": "number",
            "readOnly": true
          },
          "bridge_tls_version": {
            "type": "string",
            "enum": ["tlsv1", "tlsv1.1", "tlsv1.2", "tlsv1.3"],
            "description": "Used bridge TLS version",
            "x-web": {
              "pretty": "Bridge TLS version",
              "input-type": "select",
              "depends": [
                {
                  "use_remote_tls": "1"
                }
              ]
            }
          },
          "bridge_alpn": {
            "type": "string",
            "description": "Configure the application layer protocol negotiation option for the TLS session. Useful for brokers that support both websockets and MQTT on the same port.",
            "format": "string",
            "maxLength": 254,
            "x-web": {
              "pretty": "Bridge ALPN",
              "input-type": "input",
              "depends": [
                {
                  "use_remote_tls": "1"
                }
              ]
            }
          },
          "use_bridge_login": {
            "type": "string",
            "description": "Select to use login for bridge",
            "enum": ["0", "1"],
            "format": "is_bool",
            "x-web": {
              "pretty": "Use remote bridge login",
              "input-type": "switch"
            }
          },
          "remote_clientid": {
            "type": "string",
            "description": "Choose remote client ID",
            "format": "credentials_validate",
            "maxLength": 256,
            "x-web": {
              "pretty": "Remote ID",
              "input-type": "input",
              "depends": [
                {
                  "use_bridge_login": "1"
                }
              ]
            }
          },
          "remote_username": {
            "type": "string",
            "description": "Choose remote user name",
            "format": "credentials_validate",
            "maxLength": 512,
            "x-web": {
              "pretty": "Remote username",
              "input-type": "input",
              "depends": [
                {
                  "use_bridge_login": "1"
                }
              ]
            }
          },
          "remote_password": {
            "type": "string",
            "description": "Choose remote password",
            "format": "credentials_validate",
            "maxLength": 512,
            "writeOnly": true,
            "x-web": {
              "pretty": "Remote password",
              "input-type": "input",
              "depends": [
                {
                  "use_bridge_login": "1"
                }
              ]
            }
          },
          "try_private": {
            "type": "string",
            "description": "Check if remote broker is another instance of a daemon",
            "format": "is_bool",
            "enum": ["0", "1"],
            "x-web": {
              "pretty": "Try private",
              "input-type": "switch"
            }
          },
          "cleansession": {
            "type": "string",
            "description": "Discard session state when connecting or disconnecting",
            "format": "is_bool",
            "enum": ["0", "1"],
            "x-web": {
              "pretty": "Clean session",
              "input-type": "switch"
            }
          },
          "notifications": {
            "type": "string",
            "description": "Publish notification messages to the local and remote brokers giving information about the state of the bridge connection",
            "format": "is_bool",
            "enum": ["0", "1"],
            "x-web": {
              "pretty": "Enable notifications",
              "input-type": "switch"
            }
          },
          "notifications_local": {
            "type": "string",
            "description": "Only publish notification messages to the local broker giving information about the state of the bridge connection",
            "format": "is_bool",
            "enum": ["0", "1"],
            "x-web": {
              "pretty": "Enable local notifications",
              "input-type": "switch"
            }
          },
          "keepalive_interval": {
            "type": "string",
            "description": "Set the keepalive interval for this bridge connection, in seconds.",
            "format": "irange(5, 65535)",
            "minLength": 1,
            "maxLength": 5,
            "x-web": {
              "pretty": "Keepalive interval",
              "input-type": "input"
            }
          }
        },
        "required": ["connection_name"]
      },
      "mqtt_bridge_options": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "MQTT Bridge Configuration identifier (ID)."
              }
            }
          },
          {
            "$ref": "#/components/schemas/mqtt_bridge_single_options"
          }
        ],
        "required": ["id"]
      },
      "mqtt_broker_topic": {
        "description": "",
        "type": "object",
        "properties": {
          "topic": {
            "type": "string",
            "description": "Topic name",
            "maxLength": 64,
            "x-web": {
              "pretty": "Topic name",
              "input-type": "input",
              "unique": true
            }
          },
          "direction": {
            "type": "string",
            "description": "The direction that the messages will be shared in",
            "default": "out",
            "enum": ["out", "in", "both"],
            "x-web": {
              "pretty": "Direction",
              "input-type": "select",
              "enum-pretty": {
                "out": "OUT",
                "in": "IN",
                "both": "BOTH"
              }
            }
          },
          "qos": {
            "type": "string",
            "description": "The publish/subscribe QoS level used for this topic",
            "enum": ["0", "1", "2"],
            "x-web": {
              "pretty": "QoS",
              "input-type": "select",
              "enum-pretty": {
                "0": "At most once (0)",
                "1": "At least once (1)",
                "2": "Exactly once (2)"
              }
            }
          }
        },
        "required": ["topic", "direction", "qos"]
      },
      "req_body_mqtt_broker_topic_one": {
        "description": "",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/mqtt_broker_topic"
          }
        },
        "required": ["data"]
      },
      "req_body_mqtt_broker_topic_multi": {
        "description": "",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "uniqueItems": true,
            "minItems": 1,
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Configuration ID"
                    }
                  }
                },
                {
                  "$ref": "#/components/schemas/mqtt_broker_topic"
                }
              ],
              "required": ["id"]
            }
          }
        },
        "required": ["data"]
      },
      "mqtt_bridge_single_options_resp": {
        "type": "object",
        "properties": {
          "client_enabled": {
            "type": "string",
            "description": "Enable connection to remote bridge",
            "enum": ["0", "1"],
            "format": "is_bool",
            "x-web": {
              "pretty": "Enable",
              "input-type": "switch"
            }
          },
          "connection_name": {
            "type": "string",
            "description": "Connection name",
            "format": "nospace",
            "maxLength": 64,
            "x-web": {
              "pretty": "Connection name",
              "input-type": "input",
              "unique": true
            }
          },
          "bridge_protocol_version": {
            "type": "string",
            "enum": ["mqttv31", "mqttv311"],
            "description": "Version of the MQTT protocol",
            "x-web": {
              "pretty": "Protocol version",
              "input-type": "select",
              "enum-pretty": {
                "mqttv31": "3.1",
                "mqttv311": "3.1.1"
              }
            }
          },
          "remote_addr": {
            "type": "string",
            "description": "Select remote bridge address",
            "format": "host",
            "x-web": {
              "pretty": "Remote address",
              "input-type": "input"
            }
          },
          "remote_port": {
            "type": "string",
            "description": "Select remote port",
            "format": "port",
            "x-web": {
              "pretty": "Remote port",
              "input-type": "input"
            }
          },
          "use_remote_tls": {
            "type": "string",
            "description": "Select to use TLS/SSL for remote connection",
            "enum": ["0", "1"],
            "format": "is_bool",
            "x-web": {
              "pretty": "Use remote TLS/SSL",
              "input-type": "switch"
            }
          },
          "device_brg_files": {
            "type": "string",
            "description": "Certificate files from device"
          },
          "bridge_cafile": {
            "type": "string",
            "description": "Bridge CA file",
            "format": "file_validation",
            "x-web": {
              "pretty": "Bridge CA file",
              "input-type": "input",
              "depends": [
                {
                  "use_remote_tls": "1"
                }
              ]
            }
          },
          "bridge_cafile:file_size": {
            "description": "Uploaded file size in bytes.",
            "type": "number",
            "readOnly": true
          },
          "bridge_certfile": {
            "type": "string",
            "description": "Bridge certificates file",
            "format": "file_validation",
            "x-web": {
              "pretty": "Bridge certificate file",
              "input-type": "input",
              "depends": [
                {
                  "use_remote_tls": "1"
                }
              ]
            }
          },
          "bridge_certfile:file_size": {
            "description": "Uploaded file size in bytes.",
            "type": "number",
            "readOnly": true
          },
          "bridge_keyfile": {
            "type": "string",
            "description": "Bridge key file",
            "format": "file_validation",
            "x-web": {
              "pretty": "Bridge key file",
              "input-type": "input",
              "depends": [
                {
                  "use_remote_tls": "1"
                }
              ]
            }
          },
          "bridge_keyfile:file_size": {
            "description": "Uploaded file size in bytes.",
            "type": "number",
            "readOnly": true
          },
          "bridge_tls_version": {
            "type": "string",
            "enum": ["tlsv1", "tlsv1.1", "tlsv1.2", "tlsv1.3"],
            "description": "Used bridge TLS version",
            "x-web": {
              "pretty": "Bridge TLS version",
              "input-type": "select",
              "depends": [
                {
                  "use_remote_tls": "1"
                }
              ]
            }
          },
          "bridge_alpn": {
            "type": "string",
            "description": "Configure the application layer protocol negotiation option for the TLS session. Useful for brokers that support both websockets and MQTT on the same port.",
            "format": "string",
            "maxLength": 254,
            "x-web": {
              "pretty": "Bridge ALPN",
              "input-type": "input",
              "depends": [
                {
                  "use_remote_tls": "1"
                }
              ]
            }
          },
          "use_bridge_login": {
            "type": "string",
            "description": "Select to use login for bridge",
            "enum": ["0", "1"],
            "format": "is_bool",
            "x-web": {
              "pretty": "Use remote bridge login",
              "input-type": "switch"
            }
          },
          "remote_clientid": {
            "type": "string",
            "description": "Choose remote client ID",
            "format": "credentials_validate",
            "maxLength": 256,
            "x-web": {
              "pretty": "Remote ID",
              "input-type": "input",
              "depends": [
                {
                  "use_bridge_login": "1"
                }
              ]
            }
          },
          "remote_username": {
            "type": "string",
            "description": "Choose remote user name",
            "format": "credentials_validate",
            "maxLength": 512,
            "x-web": {
              "pretty": "Remote username",
              "input-type": "input",
              "depends": [
                {
                  "use_bridge_login": "1"
                }
              ]
            }
          },
          "remote_password": {
            "type": "string",
            "description": "Indicates if 'remote_password' option is set. 'unset' for not set, 'set' for configured.",
            "readOnly": true,
            "enum": ["unset", "set"]
          },
          "try_private": {
            "type": "string",
            "description": "Check if remote broker is another instance of a daemon",
            "format": "is_bool",
            "enum": ["0", "1"],
            "x-web": {
              "pretty": "Try private",
              "input-type": "switch"
            }
          },
          "cleansession": {
            "type": "string",
            "description": "Discard session state when connecting or disconnecting",
            "format": "is_bool",
            "enum": ["0", "1"],
            "x-web": {
              "pretty": "Clean session",
              "input-type": "switch"
            }
          },
          "notifications": {
            "type": "string",
            "description": "Publish notification messages to the local and remote brokers giving information about the state of the bridge connection",
            "format": "is_bool",
            "enum": ["0", "1"],
            "x-web": {
              "pretty": "Enable notifications",
              "input-type": "switch"
            }
          },
          "notifications_local": {
            "type": "string",
            "description": "Only publish notification messages to the local broker giving information about the state of the bridge connection",
            "format": "is_bool",
            "enum": ["0", "1"],
            "x-web": {
              "pretty": "Enable local notifications",
              "input-type": "switch"
            }
          },
          "keepalive_interval": {
            "type": "string",
            "description": "Set the keepalive interval for this bridge connection, in seconds.",
            "format": "irange(5, 65535)",
            "minLength": 1,
            "maxLength": 5,
            "x-web": {
              "pretty": "Keepalive interval",
              "input-type": "input"
            }
          }
        },
        "required": ["connection_name"]
      },
      "mqtt_bridge_options_resp": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "MQTT Bridge Configuration identifier (ID)."
              }
            }
          },
          {
            "$ref": "#/components/schemas/mqtt_bridge_single_options_resp"
          }
        ],
        "required": ["id"]
      }
    }
  }
}
