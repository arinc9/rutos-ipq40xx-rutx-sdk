#!/bin/sh /etc/rc.common
# Copyright (C) 2006-2015 OpenWrt.org

START=60
USE_PROCD=1

BIN=/usr/sbin/xl2tpd
RUN_D="/var/run/xl2tpd"
PID_F="/var/run/xl2tpd.pid"
CHAP_SECRETS=/var/etc/xl2tp-chap-secrets
SECRETS=/var/etc/xl2tp-secrets
CONFIG=/var/etc/xl2tpd.conf
OPTIONS=/var/etc/options.xl2tpd
SERVER=
BIND_STOP=

service_triggers()
{
	procd_add_reload_trigger "xl2tpd" "network"
}

check_bind()
{
	local section="$1"
	local tunnel="$2"
	local remote="${section%%_*}"
	local bind

	config_get bind $section bind_to
	[ "$bind" = "$tunnel" ] || return 1

	if [ "$PLUTO_VERB" = "up-host" ]
	then
		return 1
	elif [ "$PLUTO_VERB" = "down-host" ]
	then
		BIND_STOP="yes"
		return 1
	else
		lines=$(ipsec status "${remote}-${section}" | wc -l)
		[ "$lines" -gt 2 ] && return 1
	        BIND_STOP="yes"
		fi
}

setup_config() {
	local section="$1"
	local enabled localip start limit type auth_chap auth_pap auth_mschap2 chap

	config_get enabled "$section" enabled 0
	config_get type "$section" type

	[ "$enabled" -eq 0 ] && return 1
	[ "$type" = "server" ] || return 1

	config_load ipsec
	config_foreach check_bind connection "$section"
	[ "$BIND_STOP" = "yes" ] && return 1
	
	config_load xl2tpd
	config_get localip "$section" localip
	config_get remoteipstart "$section" start
	config_get remoteipend "$section" limit

	if [ -n "$remoteipstart" ] && [ -n "$remoteipend" ]; then
		remoteip="${remoteipstart}-${remoteipend}"
	else
		config_get remoteip "$section" remoteip
	fi

	[ -n "$remoteip" ] && [ -n "$localip" ] && {
		SERVER=/var/etc/xl2tpd.conf
		echo "local ip = $localip" >> $CONFIG
		echo "ip range = $remoteip" >> $CONFIG
		echo "ms-dns $localip" >> $OPTIONS
		counter=$(( counter + 1 ))
	}

	config_get auth_chap "$1" auth_chap "1"
        [ "$auth_chap" = "1" ] && {
		echo "require chap = yes" >> "$CONFIG"
		echo "require-chap" >> "$OPTIONS"
	} || {
		echo "refuse chap = yes" >> "$CONFIG"
		echo "refuse-chap" >> "$OPTIONS"
	}

	config_get auth_pap "$1" auth_pap "0"
	[ "$auth_pap" = "1" ] && {
		echo "require pap = yes" >> "$CONFIG"
		echo "require-pap" >> "$OPTIONS"
	} || {
		echo "refuse pap = yes" >> "$CONFIG"
		echo "refuse-pap" >> "$OPTIONS"
	}

	config_get auth_mschap2 "$1" auth_mschap2 "1"
	[ "$auth_mschap2" = "1" ] && {
		echo "require-mschap-v2" >> "$OPTIONS"
	} || {
		echo "refuse-mschap-v2" >> "$OPTIONS"
	}

	config_get chap "$section" chap
	[ "$chap" = "1" ] && echo "challenge = yes" >> "$CONFIG"

	config_get auth "$section" auth
	[ -n "$auth" ] && echo "* * $auth" >> $SECRETS
}

setup_login() {
	local section="$1"
	local username password remoteip

	config_get username "$section" username
	config_get password "$section" password
	config_get remoteip "$section" remoteip

	[ -n "$username" ] || return 0
	[ -n "$password" ] || return 0

	echo "$username xl2tp-server $password ${remoteip:-*}" >> $CHAP_SECRETS
}

count_clients(){
	local section="$1"
	local proto disabled

	config_get proto "$section" proto
	config_get disabled "$section" disabled 0

	[ "$proto" = "l2tp" ] && [ "$disabled" = "0" ] && {
		config_get auth "$section" auth;
		[ -n "$auth" ] && echo "* * $auth" >> $SECRETS;
		counter=$(( counter + 1 ));
	}
}

start_service() {
	local counter=0
	> $SECRETS
	config_load network
	config_foreach count_clients interface
	[ -z "$(uci -q get xl2tpd.@service[0])" ] && [ "$counter" -eq 0 ] && return

	mkdir -p /var/etc
	cp /etc/xl2tpd/xl2tpd.conf $CONFIG
	cp /etc/ppp/options.xl2tpd $OPTIONS
	config_load xl2tpd
	config_foreach setup_config service

	[ "$counter" -gt 0 ] || return
	config_foreach setup_login login

	rm -rf "$RUN_D"
	mkdir -p "$RUN_D"

	procd_open_instance
	procd_set_param command $BIN -D -l -p $PID_F ${SERVER:+-c $SERVER}
	procd_set_param stdout 1 # forward stdout of the command to logd
	procd_set_param stderr 1 # same for stderr
	procd_set_param respawn
	procd_close_instance

	mkdir -p /tmp/state/l2tp
	[ -n "$SERVER" ] && date "+%s" > /tmp/state/l2tp/uptime
}

stop_service() {
	rm -rf "$RUN_D" "$PID_F" "$CONFIG" "$CHAP_SECRETS" "/tmp/state/l2tp/uptime"
}

reload_service() {
        stop
        start
}
