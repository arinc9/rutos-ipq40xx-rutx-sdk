{
  "openapi": "3.0.0",
  "info": {
    "title": "Auto Reboot",
    "version": "1.0",
    "description": "Auto Reboot API documentation",
    "contact": {}
  },
  "tags": [
    {
      "name": "Reboot Scheduler"
    },
    {
      "name": "Ping/Wget Reboot"
    }
  ],
  "paths": {
    "/auto_reboot/scheduler/config": {
      "get": {
        "summary": "Returns all Reboot Scheduler configurations",
        "tags": ["Reboot Scheduler"],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200_periodic_reboot_multi"
          }
        }
      },
      "parameters": [],
      "post": {
        "summary": "Creates a new Reboot Scheduler configuration",
        "responses": {
          "201": {
            "$ref": "#/components/responses/periodic_reboot_one"
          },
          "422": {
            "$ref": "#/components/responses/422response"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/req_body_periodic_reboot_one"
              }
            }
          }
        },
        "tags": ["Reboot Scheduler"]
      },
      "put": {
        "summary": "Updates the selected Reboot Scheduler configurations",
        "responses": {
          "200": {
            "$ref": "#/components/responses/200_periodic_reboot_multi"
          },
          "404": {
            "$ref": "#/components/responses/404response"
          },
          "422": {
            "$ref": "#/components/responses/422response"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/req_body_periodic_reboot_multi"
              }
            }
          }
        },
        "tags": ["Reboot Scheduler"]
      },
      "delete": {
        "summary": "Deletes the selected Reboot Scheduler configurations",
        "responses": {
          "200": {
            "$ref": "#/components/responses/200deleted_multi"
          },
          "404": {
            "$ref": "#/components/responses/404response"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/delete_multi"
        },
        "tags": ["Reboot Scheduler"]
      },
      "x-web": {
        "menu-depends": [
          {
            "hw_tags": {
              "is_access_point": false
            },
            "values": ["System", "Maintenance", "Auto Reboot", "Reboot Scheduler"]
          },
          {
            "hw_tags": {
              "is_access_point": true
            },
            "values": ["System", "Auto Reboot", "Reboot Scheduler"]
          }
        ]
      }
    },
    "/auto_reboot/scheduler/config/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Configuration ID"
        }
      ],
      "get": {
        "summary": "Returns the selected Reboot Scheduler configuration",
        "tags": ["Reboot Scheduler"],
        "responses": {
          "200": {
            "$ref": "#/components/responses/periodic_reboot_one"
          },
          "404": {
            "$ref": "#/components/responses/404response"
          }
        }
      },
      "put": {
        "summary": "Updates the selected Reboot Scheduler configuration",
        "responses": {
          "200": {
            "$ref": "#/components/responses/periodic_reboot_one"
          },
          "404": {
            "$ref": "#/components/responses/404response"
          },
          "422": {
            "$ref": "#/components/responses/422response"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/req_body_periodic_reboot_one"
              }
            }
          }
        },
        "tags": ["Reboot Scheduler"]
      },
      "delete": {
        "summary": "Deletes the selected Reboot Scheduler configuration",
        "responses": {
          "200": {
            "$ref": "#/components/responses/200deleted"
          },
          "404": {
            "$ref": "#/components/responses/404response"
          }
        },
        "tags": ["Reboot Scheduler"]
      },
      "x-web": {
        "menu-depends": [
          {
            "hw_tags": {
              "is_access_point": false
            },
            "values": ["System", "Maintenance", "Auto Reboot", "Reboot Scheduler"]
          },
          {
            "hw_tags": {
              "is_access_point": true
            },
            "values": ["System", "Auto Reboot", "Reboot Scheduler"]
          }
        ]
      }
    },
    "/auto_reboot/ping_wget/config": {
      "get": {
        "summary": "Returns all Ping/Wget Reboot configurations",
        "tags": ["Ping/Wget Reboot"],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200_ping_reboot_multi"
          }
        }
      },
      "parameters": [],
      "post": {
        "summary": "Creates a new Ping/Wget Reboot configuration",
        "responses": {
          "201": {
            "$ref": "#/components/responses/ping_reboot_one"
          },
          "422": {
            "$ref": "#/components/responses/422response"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/req_body_ping_reboot_one"
              }
            }
          }
        },
        "tags": ["Ping/Wget Reboot"]
      },
      "put": {
        "summary": "Updates the selected Ping/Wget Reboot configurations",
        "responses": {
          "200": {
            "$ref": "#/components/responses/200_ping_reboot_multi"
          },
          "422": {
            "$ref": "#/components/responses/422response"
          },
          "404": {
            "$ref": "#/components/responses/404response"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/req_body_ping_reboot_multi"
              }
            }
          }
        },
        "tags": ["Ping/Wget Reboot"]
      },
      "delete": {
        "summary": "Deletes the selected Ping/Wget Reboot configurations",
        "responses": {
          "200": {
            "$ref": "#/components/responses/200deleted_multi"
          },
          "404": {
            "$ref": "#/components/responses/404response"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/delete_multi"
        },
        "tags": ["Ping/Wget Reboot"]
      },
      "x-web": {
        "menu-depends": [
          {
            "hw_tags": {
              "is_access_point": false
            },
            "values": ["System", "Maintenance", "Auto Reboot", "Ping/Wget Reboot"]
          },
          {
            "hw_tags": {
              "is_access_point": true
            },
            "values": ["System", "Auto Reboot", "Ping/Wget Reboot"]
          }
        ]
      }
    },
    "/auto_reboot/ping_wget/config/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Configuration ID"
        }
      ],
      "get": {
        "summary": "Returns the selected Ping/Wget Reboot configuration",
        "tags": ["Ping/Wget Reboot"],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ping_reboot_one"
          },
          "404": {
            "$ref": "#/components/responses/404response"
          }
        }
      },
      "put": {
        "summary": "Updates the selected Ping/Wget Reboot configuration",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ping_reboot_one"
          },
          "404": {
            "$ref": "#/components/responses/404response"
          },
          "422": {
            "$ref": "#/components/responses/422response"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/req_body_ping_reboot_one"
              }
            }
          }
        },
        "tags": ["Ping/Wget Reboot"]
      },
      "delete": {
        "summary": "Deletes the selected Ping/Wget Reboot configuration",
        "responses": {
          "200": {
            "$ref": "#/components/responses/200deleted"
          },
          "404": {
            "$ref": "#/components/responses/404response"
          }
        },
        "tags": ["Ping/Wget Reboot"]
      },
      "x-web": {
        "menu-depends": [
          {
            "hw_tags": {
              "is_access_point": false
            },
            "values": ["System", "Maintenance", "Auto Reboot", "Ping/Wget Reboot"]
          },
          {
            "hw_tags": {
              "is_access_point": true
            },
            "values": ["System", "Auto Reboot", "Ping/Wget Reboot"]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "periodic_reboot": {
        "type": "object",
        "properties": {
          "enable": {
            "type": "string",
            "enum": ["0", "1"],
            "format": "is_bool",
            "description": "Enable reboot instance",
            "x-web": {
              "pretty": "Enable",
              "input-type": "switch"
            }
          },
          "action": {
            "type": "string",
            "description": "Action that will be executed at specified time",
            "enum": ["1", "2"],
            "x-web": {
              "pretty": "Action",
              "input-type": "select",
              "enum-depends": [
                {
                  "hw_tags": {
                    "mobile": true
                  },
                  "values": ["1", "2"]
                },
                {
                  "hw_tags": {
                    "mobile": false
                  },
                  "values": ["1"]
                }
              ],
              "enum-pretty": {
                "1": "Device reboot",
                "2": "Modem reboot"
              },
              "unique": true
            }
          },
          "modem": {
            "type": "string",
            "description": "Modem selection",
            "format": "string",
            "x-web": {
              "pretty": "Modem",
              "input-type": "select",
              "hw_tags": {
                "dual_modem": true
              },
              "depends": [
                {
                  "action": ["2"]
                }
              ],
              "enum-pretty": {
                "$ref": "#/x-schemas/modem_names"
              },
              "enum-depends": {
                "$ref": "#/x-schemas/modem_select"
              }
            }
          },
          "period": {
            "type": "string",
            "enum": ["week", "month"],
            "description": "Select between week and month days for reboot intervals.",
            "x-web": {
              "pretty": "Interval type",
              "input-type": "select",
              "enum-pretty": {
                "week": "Week days",
                "month": "Month days"
              }
            }
          },
          "days": {
            "type": "array",
            "uniqueItems": true,
            "description": "Week days, when the reboot should happen.",
            "items": {
              "type": "string",
              "enum": ["mon", "tue", "wed", "thu", "fri", "sat", "sun"]
            },
            "x-web": {
              "pretty": "Week days",
              "input-type": "multiselect",
              "enum-pretty": {
                "mon": "Monday",
                "tue": "Tuesday",
                "wed": "Wednesday",
                "thu": "Thursday",
                "fri": "Friday",
                "sat": "Saturday",
                "sun": "Sunday"
              },
              "depends": [
                {
                  "period": "week"
                }
              ]
            }
          },
          "time": {
            "type": "array",
            "uniqueItems": true,
            "description": "Day time when action should be executed.",
            "items": {
              "type": "string",
              "format": "time"
            },
            "x-web": {
              "pretty": "Day time",
              "input-type": "input"
            }
          },
          "month_day": {
            "type": "array",
            "uniqueItems": true,
            "description": "Day of a month when reboot will happen.",
            "items": {
              "type": "string",
              "enum": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31"]
            },
            "x-web": {
              "pretty": "Month day",
              "input-type": "multiselect",
              "depends": [
                {
                  "period": "month"
                }
              ]
            }
          },
          "months": {
            "type": "array",
            "uniqueItems": true,
            "description": "Months, when reboot should happen.",
            "items": {
              "type": "string",
              "enum": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"]
            },
            "x-web": {
              "pretty": "Month",
              "input-type": "multiselect",
              "depends": [
                {
                  "period": "month"
                }
              ],
              "enum-pretty": {
                "1": "January",
                "2": "February",
                "3": "March",
                "4": "April",
                "5": "May",
                "6": "June",
                "7": "July",
                "8": "August",
                "9": "September",
                "10": "October",
                "11": "November",
                "12": "December"
              }
            }
          },
          "force_last": {
            "type": "string",
            "description": "Forces intervals to accept last day of month as valid option if selected day doesn't exist in ongoing month.",
            "format": "is_bool",
            "enum": ["0", "1"],
            "x-web": {
              "pretty": "Force last day",
              "input-type": "switch",
              "depends": [
                {
                  "period": "month"
                }
              ]
            }
          }
        }
      },
      "ping_reboot": {
        "type": "object",
        "properties": {
          "enable": {
            "type": "string",
            "description": "Turns the rule on or off.",
            "format": "is_bool",
            "enum": ["0", "1"],
            "x-web": {
              "pretty": "Enable",
              "input-type": "switch"
            }
          },
          "stop_action": {
            "type": "string",
            "description": "Stop actions when mobile data limit is reached",
            "format": "is_bool",
            "enum": ["0", "1"],
            "x-web": {
              "pretty": "No action on data limit",
              "input-type": "switch",
              "hw_tags": {
                "mobile": true,
                "is_trb5": false
              }
            }
          },
          "type": {
            "type": "string",
            "enum": ["ping", "wget"],
            "description": "Ping/Wget",
            "x-web": {
              "pretty": "Type",
              "input-type": "select",
              "enum-pretty": {
                "ping": "Ping",
                "wget": "Wget"
              }
            }
          },
          "action": {
            "type": "string",
            "description": "Action that will be executed if there is no response after the specified amount of retries",
            "enum": ["1", "2", "3", "4", "5", "6"],
            "x-web": {
              "pretty": "Action if no echo is received",
              "input-type": "select",
              "enum-depends": [
                {
                  "hw_tags": {
                    "mobile": true
                  },
                  "values": ["1", "2", "3", "4", "5", "6"]
                },
                {
                  "hw_tags": {
                    "mobile": false
                  },
                  "values": ["1", "3"]
                }
              ],
              "enum-pretty": {
                "1": "Device reboot",
                "2": "Modem reboot",
                "3": "None",
                "4": "(Re)register",
                "5": "Restart mobile connection",
                "6": "Send SMS"
              },
              "unique": true
            }
          },
          "modem_id_sms": {
            "type": "string",
            "description": "Modem, which is used to send SMS from",
            "format": "string",
            "x-web": {
              "pretty": "Gateway modem",
              "input-type": "select",
              "hw_tags": {
                "dual_modem": true
              },
              "depends": [
                {
                  "action": "6"
                }
              ],
              "enum-pretty": {
                "$ref": "#/x-schemas/modem_names"
              },
              "enum-depends": {
                "$ref": "#/x-schemas/modem_select"
              }
            }
          },
          "number": {
            "type": "array",
            "description": "Phone number for the SMS to be sent to",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "format": "phonedigit"
            },
            "x-web": {
              "pretty": "Phone number",
              "input-type": "input",
              "depends": [
                {
                  "action": "6"
                }
              ]
            }
          },
          "message": {
            "type": "string",
            "format": "regex",
            "pattern": "^[a-zA-Z0-9!@#$%&*+-/=?^_`{|}~. ]+$",
            "maxLength": 480,
            "description": "Message to be sent. Allowed characters: (a-zA-Z0-9!@#$%&*+-/=?^_`{|}~.)",
            "x-web": {
              "pretty": "Message text",
              "input-type": "input",
              "depends": [
                {
                  "action": "6"
                }
              ]
            }
          },
          "modem": {
            "type": "string",
            "description": "Modem selection",
            "x-web": {
              "pretty": "Modem",
              "input-type": "select",
              "hw_tags": {
                "dual_modem": true
              },
              "depends": [
                {
                  "action": ["2", "4", "5"]
                }
              ],
              "enum-pretty": {
                "$ref": "#/x-schemas/modem_names"
              },
              "enum-depends": {
                "$ref": "#/x-schemas/modem_select"
              }
            }
          },
          "time": {
            "type": "string",
            "description": "Time interval between two ping/wget requests. E.g. if 5 min is selected, action will be performed at every 5th minute",
            "enum": ["1", "2", "3", "4", "5", "15", "30", "60", "120"],
            "x-web": {
              "enum-pretty": {
                "1": "1 min",
                "2": "2 mins",
                "3": "3 mins",
                "4": "4 mins",
                "5": "5 mins",
                "15": "15 mins",
                "30": "30 mins",
                "60": "1 hour",
                "120": "2 hour"
              },
              "pretty": "Interval",
              "input-type": "select"
            }
          },
          "retry": {
            "type": "string",
            "format": "irange(1, 9999)",
            "minimum": 1,
            "maximum": 9999,
            "description": "Number of failed to receive responses before selected action is executed. Range [1 - 9999]",
            "x-web": {
              "pretty": "Interval count",
              "input-type": "input"
            }
          },
          "time_out": {
            "type": "string",
            "format": "irange(1, 9999)",
            "minimum": 1,
            "maximum": 9999,
            "description": "Time interval (in seconds) to wait for a response. Range [1 - 9999]",
            "x-web": {
              "pretty": "Timeout (sec)",
              "input-type": "input"
            }
          },
          "packet_size": {
            "type": "string",
            "format": "irange(0, 1000)",
            "minimum": 0,
            "maximum": 1000,
            "description": "ICMP packet size in bytes.",
            "x-web": {
              "pretty": "Packet size",
              "input-type": "input",
              "depends": [
                {
                  "type": "ping"
                }
              ]
            }
          },
          "interface": {
            "type": "string",
            "enum": ["1", "2"],
            "description": "Interface select",
            "x-web": {
              "pretty": "Interface",
              "input-type": "select",
              "enum-pretty": {
                "1": "Automatically selected",
                "2": "Ping from mobile"
              },
              "depends": [
                {
                  "type": "ping"
                }
              ]
            }
          },
          "ip_type": {
            "type": "string",
            "enum": ["ipv4", "ipv6"],
            "description": "IP type",
            "x-web": {
              "pretty": "IP type",
              "input-type": "select",
              "enum-pretty": {
                "ipv4": "IPv4",
                "ipv6": "IPv6"
              },
              "depends": [
                {
                  "type": "ping",
                  "interface": "1"
                }
              ]
            }
          },
          "url": {
            "type": "string",
            "format": "protourl",
            "description": "URL to which the wget requests will be sent. E.g. http://www.host.com",
            "x-web": {
              "pretty": "URL",
              "input-type": "input",
              "depends": [
                {
                  "type": "wget"
                }
              ]
            }
          },
          "host": {
            "type": "string",
            "description": "Hostname or IP address to which the ping requests will be sent. E.g. 1.1.1.1 (or www.host.com if DNS server is configured correctly)",
            "format": "host",
            "x-web": {
              "pretty": "Host to ping",
              "input-type": "input",
              "depends": [
                {
                  "type": "ping",
                  "interface": "1"
                }
              ],
              "unique": true
            }
          },
          "ip_type1": {
            "type": "string",
            "enum": ["ipv4", "ipv6"],
            "description": "IP type",
            "x-web": {
              "pretty": "IP type",
              "input-type": "select",
              "enum-pretty": {
                "ipv4": "IPv4",
                "ipv6": "IPv6"
              },
              "hw_tags": {
                "mobile": true
              },
              "depends": [
                {
                  "type": "ping",
                  "interface": "2"
                }
              ]
            }
          },
          "host1": {
            "type": "string",
            "format": "host",
            "description": "Hostname or IP address to which the ping requests will be sent. E.g. 1.1.1.1",
            "x-web": {
              "pretty": "Host to ping from SIM 1",
              "input-type": "input",
              "hw_tags": {
                "mobile": true
              },
              "depends": [
                {
                  "type": "ping",
                  "interface": "2"
                }
              ],
              "unique": true
            }
          },
          "ip_type2": {
            "type": "string",
            "enum": ["ipv4", "ipv6"],
            "description": "IP type",
            "x-web": {
              "pretty": "IP type",
              "input-type": "select",
              "hw_tags": {
                "dual_modem_or_dual_sim": true
              },
              "depends": [
                {
                  "type": "ping",
                  "interface": "2"
                }
              ],
              "enum-pretty": {
                "ipv4": "IPv4",
                "ipv6": "IPv6"
              }
            }
          },
          "host2": {
            "type": "string",
            "format": "host",
            "description": "Hostname or IP address to which the ping requests will be sent. E.g. 1.1.1.1",
            "x-web": {
              "pretty": "Host to ping from SIM 2",
              "input-type": "input",
              "hw_tags": {
                "dual_modem_or_dual_sim": true
              },
              "depends": [
                {
                  "type": "ping",
                  "interface": "2"
                }
              ],
              "unique": true
            }
          }
        }
      },
      "req_body_periodic_reboot_one": {
        "description": "",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/periodic_reboot"
          }
        },
        "required": ["data"]
      },
      "req_body_ping_reboot_one": {
        "description": "",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ping_reboot"
          }
        },
        "required": ["data"]
      },
      "req_body_ping_reboot_multi": {
        "description": "",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    }
                  }
                },
                {
                  "$ref": "#/components/schemas/ping_reboot"
                }
              ],
              "required": ["id"]
            }
          }
        },
        "required": ["data"]
      },
      "req_body_periodic_reboot_multi": {
        "description": "",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "uniqueItems": true,
            "minItems": 1,
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    }
                  },
                  "required": ["id"]
                },
                {
                  "$ref": "#/components/schemas/periodic_reboot"
                }
              ]
            }
          }
        },
        "required": ["data"]
      }
    },
    "responses": {
      "periodic_reboot_one": {
        "description": "Example response",
        "content": {
          "application/json": {
            "schema": {
              "description": "",
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Operation status"
                },
                "data": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      },
                      "required": ["id"]
                    },
                    {
                      "$ref": "#/components/schemas/periodic_reboot"
                    }
                  ]
                }
              },
              "required": ["success", "data"]
            }
          }
        }
      },
      "200_periodic_reboot_multi": {
        "description": "Example response",
        "content": {
          "application/json": {
            "schema": {
              "description": "",
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Operation status"
                },
                "data": {
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          }
                        },
                        "required": ["id"]
                      },
                      {
                        "$ref": "#/components/schemas/periodic_reboot"
                      }
                    ]
                  }
                }
              },
              "required": ["success", "data"]
            }
          }
        }
      },
      "ping_reboot_one": {
        "description": "Example response",
        "content": {
          "application/json": {
            "schema": {
              "description": "",
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Operation status"
                },
                "data": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      },
                      "required": ["id"]
                    },
                    {
                      "$ref": "#/components/schemas/ping_reboot"
                    }
                  ]
                }
              },
              "required": ["success", "data"]
            }
          }
        }
      },
      "200_ping_reboot_multi": {
        "description": "Example response",
        "content": {
          "application/json": {
            "schema": {
              "description": "",
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Operation status"
                },
                "data": {
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          }
                        },
                        "required": ["id"]
                      },
                      {
                        "$ref": "#/components/schemas/ping_reboot"
                      }
                    ]
                  }
                }
              },
              "required": ["success", "data"]
            }
          }
        }
      }
    }
  }
}
