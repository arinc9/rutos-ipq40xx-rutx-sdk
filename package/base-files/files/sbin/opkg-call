#!/bin/sh
. /lib/functions.sh

SUCCESS=0
INVALID_PACKAGE=1
LOWER_VERSION=2
WRONG_ARCH=3
WRONG_FW=4
NO_SPACE=5
INSTALL_FAIL=6
OPKG_TIMEOUT=7
FAILURE=8

print_help() {
  cat <<EOF
	Usage: opkg-call <option>
options:
	<package>                       - calculates installed size of package and all its necessary dependencies
	--offline-install <directory>   - installs package from given directory
	--online-install <package>      - installs package from server
EOF
	exit "$SUCCESS"
}

handle_offline_install() {

	local extracted_dir="$1"
	local pr_on_hold=0
	local return_code=0

	local package_name=$(grep "Package:" "$extracted_dir/main" 2>/dev/null | sed 's/.* //g')
	[ -z "$package_name" ] && exit $INVALID_PACKAGE

	local package_v=$(grep "Version:" "$extracted_dir/main" 2>/dev/null | sed 's/.* //g')

	check_package_arch "$extracted_dir/main" || exit $WRONG_ARCH

	check_package_fw "$extracted_dir/main" || exit $WRONG_FW

	check_installed_size "$extracted_dir" || exit $NO_SPACE

	# Pause package restore before manual package installation
	[ -e /etc/package_restore.txt ] && pr_on_hold=1 && control_package_restore "0"

	install_packages "$extracted_dir" "$package_name" "$package_v"
	return_code="$?"

	# Resume package restore after manual package installation
	[ "$pr_on_hold" == "1" ] && control_package_restore "1"

	exit "$return_code"
}

handle_online_install() {

	local package_name="$1"
	local free_fmem=0
	local return_code=0
	local pr_on_hold=0

	calculate_size "$package_name"

	free_fmem=$(df -k | grep /overlay | awk '{print $4; exit}')

	FULL_SIZE=$((($FULL_SIZE + 50) / 1024))

	[ "$free_fmem" -lt "$FULL_SIZE" ] && exit "$NO_SPACE"

	# Pause package restore before manual package installation
	[ -e /etc/package_restore.txt ] && pr_on_hold=1 && control_package_restore "0"

	install_package "$package_name"
	return_code="$?"

	# Resume package restore after manual package installation
	[ "$pr_on_hold" == "1" ] && control_package_restore "1"

	exit "$return_code"
}

install_package() {

	local package_name="$1"

	opkg_check || return $OPKG_TIMEOUT

	mkdir "/tmp/custom_package"
	opkg install -f /etc/tlt_opkg.conf --tmp-dir "/tmp/custom_package" --force-removal-of-essential-packages "$package_name"
	return_code="$?"
	rmdir "/tmp/custom_package"
	if [ "$return_code" -ne "0" ]; then
		return $INSTALL_FAIL
	fi

	log "Package '${package_name}' installed succesfully" && return $SUCCESS
}

install_packages() {

	local package_dir="$1"
	local main_pack="$2"
	local package_v="$3"

	mkdir "$package_dir/main_dir" 2>/dev/null

	mv "$package_dir/$main_pack"_*.ipk "$package_dir/main_dir/"

	opkg_check || return $OPKG_TIMEOUT

	check_package_v "$main_pack" "$package_v" || return $LOWER_VERSION

	opkg install --force-removal-of-essential-packages $(ls "$package_dir"/main_dir/*.ipk) $(ls "$package_dir"/*.ipk) || return $INSTALL_FAIL

	log "Package '${main_pack}' installed succesfully" && return $SUCCESS
}

check_package_v() {

	local main_package="$1"
	local new_package_v="$2"

	local old_package_v=$(grep "Version" "/usr/lib/opkg/info/${main_package}.control" 2>/dev/null | sed 's/.* //g')

	[ -z "$old_package_v" ] && return $SUCCESS

	opkg compare-versions "$old_package_v" ">=" "$new_package_v" &&
		log "Package '${main_package}' with higher version '${old_package_v}' already installed" && return $FAILURE

	return $SUCCESS
}

check_package_fw() {

	local main_file="$1"

	local package_fw=$(grep "Firmware:" "$main_file" 2>/dev/null | sed 's/.* //g')
	local device_fw=$(cat /etc/version)

	[ "$package_fw" != "$device_fw" ] && log "Different firmware versions: '${device_fw}' != '${package_fw}'" && return $FAILURE

	return $SUCCESS
}

check_package_arch() {

	local main_file="$1"

	local hw_arch=$(grep "platform" "/etc/board.json" | sed 's/.* //g')
	hw_arch="${hw_arch:1:-1}"

	local package_arch=$(grep "Router:" "$main_file" 2>/dev/null | sed 's/.*: //g')

	[ "${hw_arch}" = "${package_arch}" ] && return $SUCCESS

	mnf_dev_name=$(mnf_info -n)

	for i in $package_arch; do
		case "$mnf_dev_name" in
			*"$i"*)
				return $SUCCESS
			;;
		esac
	done

	log "Different architectures: ${hw_arch} != ${package_arch}"
	return $FAILURE
}

check_installed_size() {

	local package_dir="$1"
	local installed_size=0
	local package_name

	# For reserve
	local sum=50

	local free_fmem=$(df -k | grep /overlay | awk '{print $4; exit}')

	rm "$package_dir"/main 2>/dev/null

	local packages=$(ls "$package_dir")

	mkdir "$package_dir"/control_dir

	for i in $packages
	do
		/bin/tar -xzC"$package_dir"/control_dir -f "$package_dir"/"$i"

		package_name=$(zcat "$package_dir"/control_dir/control.tar.gz | grep Package: | sed 's/.* //g')

		[ -n "$(ls /usr/lib/opkg/info | grep "$package_name".control)" ] && continue

		installed_size=$(zcat "$package_dir"/control_dir/control.tar.gz | grep Installed-Size | sed 's/.* //g')

		sum=$((sum + installed_size))
	done

	sum=$((sum / 1024))

	[ "$sum" -lt "$free_fmem" ] && return $SUCCESS

	log "Not enough space to install package, package space: ${sum}, free router space: ${free_fmem}" && return $FAILURE
}

control_package_restore() {

	local enabled_value="$1"

	uci_set "package_restore" "package_restore" "enabled" "$enabled_value"

	uci_commit

	/etc/init.d/package_restore restart
}

opkg_check() {

	local delay=5
	local timeout=$((60 * 9))
	local max_retries=$((timeout / delay))
	local retries=0

	while [ -e "/var/lock/opkg.lock" ]; do
		# Timeout after 9 minutes
		[ "$retries" -ge "$max_retries" ] && return $OPKG_TIMEOUT
		retries=$((retries + 1))
		sleep 5
	done

	return $SUCCESS
}

log() {
	logger -t "$0" "$*"
	echo "$*"
}

OUTPUT=$(gzip -cd /var/opkg-lists/tlt_packages 2>/dev/null)

[ $# -eq 0 ] && {
	echo "$OUTPUT"
	exit "$SUCCESS"
}

CHECKED_LIST=""
FULL_SIZE=0

calculate_size() {
	local pkg size depends
	pkg="$1"

	size=$(echo "$OUTPUT" | sed -n "/Package: $pkg$/,/Package:/p" | grep "Installed-Size" | awk '{print $2}')
	[ -n "$size" ] && FULL_SIZE=$(($FULL_SIZE + $size))
	CHECKED_LIST="$CHECKED_LIST $pkg"
	depends=$(echo "$OUTPUT" | sed -n "/Package: $pkg$/,/Package:/p" | grep "Depends" | awk -F "Depends: " '{print $2}' | sed "s/,//g")

	for d in $depends; do
		[ $(echo "$CHECKED_LIST" | grep -wc "$d") -ne 0 ] && continue
		[ -f /usr/lib/opkg/info/"$d".control ] || calculate_size "$d"
	done
}

case "$1" in
	--offline-install)
		handle_offline_install "$2"
		;;
	--online-install)
		handle_online_install "$2"
		;;
	-h | --help)
		print_help
		;;
esac

calculate_size "$1"
echo "$FULL_SIZE"
exit "$SUCCESS"
