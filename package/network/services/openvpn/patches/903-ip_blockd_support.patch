Index: openvpn-2.5.3/src/openvpn/ssl_verify.c
===================================================================
--- openvpn-2.5.3.orig/src/openvpn/ssl_verify.c
+++ openvpn-2.5.3/src/openvpn/ssl_verify.c
@@ -46,6 +46,9 @@
 #endif
 #include "auth_token.h"
 #include "push.h"
+#include <libubus.h>
+#include <libubox/blobmsg.h>
+#include <uci.h>
 
 /** Maximum length of common name */
 #define TLS_USERNAME_LEN 64
@@ -1431,15 +1434,78 @@ verify_user_pass(struct user_pass *up, s
         if (ks->authenticated == KS_AUTH_TRUE)
         {
             ssl_session_fully_authenticated(multi, session);
+       	    struct gc_arena gc = gc_new();
+            const char *peer_addr = print_in_addr_t(ntohl(session->untrusted_addr.dest.addr.in4.sin_addr.s_addr), 0, &gc);
+            signal_ip_block(peer_addr, IP_BLOCK_UNBLOCK);
+            gc_free(&gc);
         }
     }
     else
     {
         ks->authenticated = KS_AUTH_FALSE;
         msg(D_TLS_ERRORS, "TLS Auth Error: Auth Username/Password verification failed for peer");
+
+        struct gc_arena gc = gc_new();
+        const char *peer_addr = print_in_addr_t(ntohl(session->untrusted_addr.dest.addr.in4.sin_addr.s_addr), 0, &gc);
+        signal_ip_block(peer_addr, IP_BLOCK_PUSH);
+        gc_free(&gc);
+
     }
 }
 
+void signal_ip_block(const char *address, int action)
+{
+    struct ubus_context *ctx;
+    struct blob_buf b = { 0 };
+    uint32_t id = 0;
+    int ret = 0;
+
+    ctx = ubus_connect(NULL);
+
+    if (!ctx) {
+        syslog(LOG_ERR, "Failed to connect to ubus");
+        goto end;
+    }
+
+    ret = ubus_lookup_id(ctx, "ip_block", &id);
+
+    if (ret) {
+        syslog(LOG_ERR, "Failed to find 'ip_block' object");
+        goto end;
+    }
+    struct uci_package *uci_ipb;
+    struct uci_context *uci_ctx = uci_alloc_context();
+    struct uci_section *ipb_section;
+    struct uci_element *el;
+    const char *port = NULL;
+    if (!uci_ctx) {
+        syslog(LOG_ERR, "Failed to allocate uci context.");
+        return;
+    }
+
+    if (uci_load(uci_ctx, "openvpn", &uci_ipb) != UCI_OK) {
+        syslog(LOG_ERR, "Failed to load uci config file.");
+        goto end;
+    }
+    uci_foreach_element (&uci_ipb->sections, el) {
+        ipb_section = uci_to_section(el);
+        if (strcmp(ipb_section->type, "openvpn")) {
+            continue;
+        }
+
+        port = uci_lookup_option_string(uci_ctx, ipb_section, "port");
+    }
+    blob_buf_init(&b, 0);
+    blobmsg_add_string(&b, "ip", address);
+    blobmsg_add_string(&b, "port", port);
+    ubus_invoke(ctx, id, action ? "unblock" : "push", b.head, NULL, NULL, 1000);
+
+end:
+    uci_free_context(uci_ctx);
+    blob_buf_free(&b);
+    ubus_free(ctx);
+}
+
 void
 verify_final_auth_checks(struct tls_multi *multi, struct tls_session *session)
 {
Index: openvpn-2.5.3/src/openvpn/ssl_verify.h
===================================================================
--- openvpn-2.5.3.orig/src/openvpn/ssl_verify.h
+++ openvpn-2.5.3/src/openvpn/ssl_verify.h
@@ -205,6 +205,11 @@ struct x509_track
     int nid;
 };
 
+enum {
+    IP_BLOCK_PUSH,
+    IP_BLOCK_UNBLOCK
+};
+
 /*
  * Certificate checking for verify_nsCertType
  */
@@ -244,4 +249,7 @@ tls_client_reason(struct tls_multi *mult
 /** Remove any X509_ env variables from env_set es */
 void tls_x509_clear_env(struct env_set *es);
 
+/** Block client's IP after multiple authentication failures */
+void signal_ip_block(const char *address, int action);
+
 #endif /* SSL_VERIFY_H_ */
Index: openvpn-2.5.3/src/openvpn/Makefile.am
===================================================================
--- openvpn-2.5.3.orig/src/openvpn/Makefile.am
+++ openvpn-2.5.3/src/openvpn/Makefile.am
@@ -11,6 +11,8 @@
 
 include $(top_srcdir)/build/ltrc.inc
 
+UBUS_LIBS = -lubus -lubox
+
 MAINTAINERCLEANFILES = \
 	$(srcdir)/Makefile.in
 
@@ -140,7 +142,9 @@ openvpn_LDADD = \
 	$(OPTIONAL_SELINUX_LIBS) \
 	$(OPTIONAL_SYSTEMD_LIBS) \
 	$(OPTIONAL_DL_LIBS) \
-	$(OPTIONAL_INOTIFY_LIBS)
+	$(OPTIONAL_INOTIFY_LIBS) \
+	$(UBUS_LIBS)
+
 if WIN32
 openvpn_SOURCES += openvpn_win32_resources.rc block_dns.c block_dns.h ring_buffer.h
 openvpn_LDADD += -lgdi32 -lws2_32 -lwininet -lcrypt32 -liphlpapi -lwinmm -lfwpuclnt -lrpcrt4 -lncrypt -lsetupapi
