--- a/drivers/leds/led-core.c
+++ b/drivers/leds/led-core.c
@@ -64,6 +64,8 @@ static void led_timer_function(struct ti
 	struct led_classdev *led_cdev = from_timer(led_cdev, t, blink_timer);
 	unsigned long brightness;
 	unsigned long delay;
+	unsigned long j_delay;
+	unsigned long delay_error;
 
 	if (!led_cdev->blink_delay_on || !led_cdev->blink_delay_off) {
 		led_set_brightness_nosleep(led_cdev, LED_OFF);
@@ -86,6 +88,17 @@ static void led_timer_function(struct ti
 		else
 			brightness = led_cdev->blink_brightness;
 		delay = led_cdev->blink_delay_on;
+
+		/* If this is not first cycle of this function when led is turned on after
+		 * blinking timer was turned on. Then we calculate, delay error by
+		 * subtracting predicted delay time (adjusted by last blink error) from
+		 * time time difference between last led turn off to now*/
+		if (led_cdev->last_blink_off)
+			delay_error = jiffies - led_cdev->last_blink_off -
+				(msecs_to_jiffies(led_cdev->blink_delay_off) -
+				 led_cdev->last_blink_error);
+
+		led_cdev->last_blink_on = jiffies;
 	} else {
 		/* Store the current brightness value to be able
 		 * to restore it when the delay_off period is over.
@@ -93,6 +106,13 @@ static void led_timer_function(struct ti
 		led_cdev->blink_brightness = brightness;
 		brightness = LED_OFF;
 		delay = led_cdev->blink_delay_off;
+
+		if (led_cdev->last_blink_on)
+			delay_error = jiffies - led_cdev->last_blink_on -
+				(msecs_to_jiffies(led_cdev->blink_delay_on) -
+				 led_cdev->last_blink_error);
+
+		led_cdev->last_blink_off = jiffies;
 	}
 
 	led_set_brightness_nosleep(led_cdev, brightness);
@@ -113,7 +133,34 @@ static void led_timer_function(struct ti
 		}
 	}
 
-	mod_timer(&led_cdev->blink_timer, jiffies + msecs_to_jiffies(delay));
+
+	/* Adding found error to leftover cumulative error from previous timer cycle */
+	led_cdev->cumulative_blink_error += delay_error;
+
+	/* There is no point of having cumulative error highier than full
+	 * blinking period. Also this prevent cumulative error from
+	 * reaching enormous sizes */
+	if (unlikely(led_cdev->cumulative_blink_error >=
+			msecs_to_jiffies(led_cdev->blink_delay_on +
+				led_cdev->blink_delay_off)))
+		led_cdev->cumulative_blink_error %= msecs_to_jiffies(led_cdev->blink_delay_on +
+			led_cdev->blink_delay_off);
+
+	j_delay = msecs_to_jiffies(delay);
+
+	if (j_delay <= led_cdev->cumulative_blink_error) {
+		/* Setting delay error so, that next timer cycle would be after 1 jiffie
+		 * In this case leftover cululateive error will be non zero */
+		delay_error = j_delay - 1;
+		led_cdev->cumulative_blink_error -= delay_error;
+	} else {
+		delay_error = led_cdev->cumulative_blink_error;
+		led_cdev->cumulative_blink_error = 0;
+	}
+
+	led_cdev->last_blink_error = delay_error;
+
+	mod_timer(&led_cdev->blink_timer, jiffies + j_delay - delay_error);
 }
 
 static void set_brightness_delayed(struct work_struct *ws)
@@ -167,6 +214,11 @@ static void led_set_software_blink(struc
 		return;
 	}
 
+	led_cdev->last_blink_on = 0;
+	led_cdev->last_blink_off = 0;
+	led_cdev->last_blink_error = 0;
+	led_cdev->cumulative_blink_error = 0;
+
 	set_bit(LED_BLINK_SW, &led_cdev->work_flags);
 	mod_timer(&led_cdev->blink_timer, jiffies + 1);
 }
@@ -236,6 +288,10 @@ void led_stop_software_blink(struct led_
 	del_timer_sync(&led_cdev->blink_timer);
 	led_cdev->blink_delay_on = 0;
 	led_cdev->blink_delay_off = 0;
+	led_cdev->last_blink_on = 0;
+	led_cdev->last_blink_off = 0;
+	led_cdev->last_blink_error = 0;
+	led_cdev->cumulative_blink_error = 0;
 	clear_bit(LED_BLINK_SW, &led_cdev->work_flags);
 }
 EXPORT_SYMBOL_GPL(led_stop_software_blink);
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -128,6 +128,15 @@ struct led_classdev {
 	const char		*default_trigger;	/* Trigger to use */
 
 	unsigned long		 blink_delay_on, blink_delay_off;
+	/* When blinking led was set to 'off' or 'on' in jiffies */
+	unsigned long		 last_blink_on;
+	unsigned long		 last_blink_off;
+	/* Blink error of the last timer cycle in jiffies */
+	unsigned long		 last_blink_error;
+	/* If large errors occur, that can not be adjusted in one timer
+	 * cycle. Remainder in jiffies is added to this to be accounted
+	 * in next timer cycle*/
+	unsigned long		 cumulative_blink_error;
 	struct timer_list	 blink_timer;
 	int			 blink_brightness;
 	int			 new_blink_brightness;
