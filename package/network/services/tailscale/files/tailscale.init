#!/bin/sh /etc/rc.common

# Copyright 2020 Google LLC.
# Copyright (C) 2021 CZ.NIC z.s.p.o. (https://www.nic.cz/)
# SPDX-License-Identifier: Apache-2.0

USE_PROCD=1
START=80

connect() {
	local status auth_url state param routes
	local counter=0
	local auth_type="$1"
	local auth_key="$2"
	local exit_node="$3"
	local accept_routes="$4"
	local advert_routes="$5"
	status=$(/etc/init.d/tailscale status)
	while [ "$status" != "running" ]; do
		sleep 1
		counter=$((counter+1))
		status=$(/etc/init.d/tailscale status)
		[ $counter -ge 5 ] && exit
	done

	[ "$accept_routes" -eq 1 ] && accept_routes="--accept-routes" && param="$accept_routes"
	if [ "$exit_node" -eq 1 ] && exit_node="--advertise-exit-node"; then
		[ -z "$param" ] && param="$exit_node" || param="$param $exit_node"
	fi
	if [ -n "$advert_routes" ]; then
		for route in $advert_routes; do
			[ -z "$routes" ] && routes="$route" && continue
			routes="${routes},${route}"
		done
		advert_routes="--advertise-routes $routes"
		[ -z "$param" ] && param="$advert_routes" || param="$param $advert_routes"
	fi

	eval "$(/usr/sbin/tailscale status --json | jsonfilter -e 'auth_url=@.AuthURL' -e 'state=@.BackendState')"
	if [ "$auth_type" = "url" ]; then
		if [ "$state" = "NeedsLogin" ] && [ -z "$auth_url" ]; then
			/usr/sbin/tailscale login --timeout 5s 1>/dev/null 2>&1
		else
			/usr/sbin/tailscale up $param --reset --timeout 5s 1>/dev/null 2>&1
		fi
	fi

	if [ "$auth_type" = "key" ] && [ -n "$auth_key" ]; then
		/usr/sbin/tailscale logout 1>/dev/null 2>&1
		/usr/sbin/tailscale up --auth-key $auth_key $param --reset --timeout 5s 1>/dev/null 2>&1
	fi
}

start_service() {
	local state_file port std_err std_out
	local auth_key exit_node accept_routes advert_routes auth_type

	[ "$(uci -q get tailscale.settings.enabled)" = "0" ] && return

	config_load tailscale
	config_get_bool std_out "settings" log_stdout 0
	config_get_bool std_err "settings" log_stderr 0
	config_get port "settings" port 41641
	config_get state_file "settings" state_file /etc/tailscale/tailscaled.state
	config_get auth_key "settings" auth_key ""
	config_get_bool exit_node "settings" exit_node 0
	config_get_bool accept_routes "settings" accept_routes 0
	config_get advert_routes "settings" advert_routes ""
	config_get auth_type "settings" auth_type "url"

	/usr/sbin/tailscaled --cleanup 1>/dev/null 2>&1

	procd_open_instance
	procd_set_param command /usr/sbin/tailscaled

# Set the port to listen on for incoming VPN packets.
# Remote nodes will automatically be informed about the new port number,
# but you might want to configure this in order to set external firewall
# settings.
	procd_append_param command --port "$port"
	procd_append_param command --state "$state_file"

	procd_set_param respawn
	procd_set_param stdout "$std_out"
	procd_set_param stderr "$std_err"

	procd_close_instance

	#Connect the device when tailscale service started
	connect "$auth_type" "$auth_key" "$exit_node" "$accept_routes" "$advert_routes" &
}

stop_service() {
	/usr/sbin/tailscale down
	/usr/sbin/tailscaled --cleanup 1>/dev/null 2>&1
}

reload_service() {
	stop
	start
}

service_triggers(){
	procd_add_reload_trigger tailscale
}
