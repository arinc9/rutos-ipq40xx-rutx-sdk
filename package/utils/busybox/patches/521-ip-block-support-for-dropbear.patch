--- a/Makefile
+++ b/Makefile
@@ -600,7 +600,9 @@ libs-y		:= $(libs-y1) $(libs-y2)
 # System.map is generated to document addresses of all kernel symbols
 
 busybox-all  := $(core-y) $(libs-y)
-
+ifdef CONFIG_FEATURE_IP_BLOCKD
+CONFIG_EXTRA_LDLIBS:=ubus ubox uci log
+endif
 # Rule to link busybox - also used during CONFIG_KALLSYMS
 # May be overridden by arch/$(ARCH)/Makefile
 quiet_cmd_busybox__ ?= LINK    $@
--- a/loginutils/login.c
+++ b/loginutils/login.c
@@ -47,6 +47,12 @@
 //config:	The file /etc/securetty is used by (some versions of) login(1).
 //config:	The file contains the device names of tty lines (one per line,
 //config:	without leading /dev/) on which root is allowed to login.
+//config:
+//config:config FEATURE_IP_BLOCKD
+//config:	bool "Support for IP block daemon"
+//config:	default y
+//config:	depends on LOGIN
+//config:
 
 //applet:/* Needs to be run by root or be suid root - needs to change uid and gid: */
 //applet:IF_LOGIN(APPLET(login, BB_DIR_BIN, BB_SUID_REQUIRE))
@@ -69,6 +75,22 @@
 #include "libbb.h"
 #include "common_bufsiz.h"
 #include <syslog.h>
+#ifdef CONFIG_FEATURE_IP_BLOCKD
+#include <liblog.h>
+#include <libubus.h>
+#include <libubox/blobmsg.h>
+#include <string.h>
+#include <uci.h>
+#include <libtlt_utils.h>
+#endif // CONFIG_FEATURE_IP_BLOCKD
+
+static char ip_address[46];
+
+#ifdef CONFIG_FEATURE_IP_BLOCKD
+void unblock_ip(char* host, char *port);
+void block_ip(char *ip, char *port);
+static void push_log(char *format, ...);
+#endif // CONFIG_FEATURE_IP_BLOCKD
 
 #if ENABLE_SELINUX
 # include <selinux/selinux.h>  /* for is_selinux_enabled()  */
@@ -330,6 +352,7 @@ int login_main(int argc UNUSED_PARAM, ch
 	int count = 0;
 	struct passwd *pw;
 	char *opt_host = NULL;
+	char *opt_port = NULL;
 	char *opt_user = opt_user; /* for compiler */
 	char *full_tty;
 	char *short_tty;
@@ -363,7 +386,7 @@ int login_main(int argc UNUSED_PARAM, ch
 	bb_daemon_helper(DAEMON_CLOSE_EXTRA_FDS);
 
 	username[0] = '\0';
-	opt = getopt32(argv, "f:h:p", &opt_user, &opt_host);
+	opt = getopt32(argv, "f:h:pP:", &opt_user, &opt_host, &opt_port);
 	if (opt & LOGIN_OPT_f) {
 		if (!run_by_root)
 			bb_simple_error_msg_and_die("-f is for root only");
@@ -391,10 +414,29 @@ int login_main(int argc UNUSED_PARAM, ch
 		full_tty = xstrdup("UNKNOWN");
 	short_tty = skip_dev_pfx(full_tty);
 
+#ifdef CONFIG_FEATURE_IP_BLOCKD
+	const char *proto = lutil_protocol_resolve(opt_port);
+#endif // CONFIG_FEATURE_IP_BLOCKD
+
 	if (opt_host) {
-		fromhost = xasprintf(" on '%s' from '%s'", short_tty, opt_host);
+		// Fix IPv4 turning into IPv6
+		char *ip_log = opt_host;
+
+		if (strncmp(ip_log, "::ffff:", 7) == 0) {
+			ip_log += 7;
+		}
+
+#ifdef CONFIG_FEATURE_IP_BLOCKD
+		fromhost = xasprintf(" on %s (%s) from %s", proto ? proto : "-", short_tty, ip_log);
+#else
+		fromhost = xasprintf(" on %s from %s", short_tty, ip_log);
+#endif // CONFIG_FEATURE_IP_BLOCKD
 	} else {
-		fromhost = xasprintf(" on '%s'", short_tty);
+#ifdef CONFIG_FEATURE_IP_BLOCKD
+		fromhost = xasprintf(" on %s (%s)", proto ? proto : "-", short_tty);
+#else
+		fromhost = xasprintf(" on %s", short_tty);
+#endif // CONFIG_FEATURE_IP_BLOCKD
 	}
 
 	/* Was breaking "login <username>" from shell command line: */
@@ -485,11 +527,9 @@ int login_main(int argc UNUSED_PARAM, ch
 		syslog(LOG_WARNING, "pam_%s call failed: %s (%d)", failed_msg,
 					pam_strerror(pamh, pamret), pamret);
 		login_pam_end(pamh);
-		safe_strncpy(username, "UNKNOWN", sizeof(username));
 #else /* not PAM */
 		pw = getpwnam(username);
 		if (!pw) {
-			strcpy(username, "UNKNOWN");
 			goto fake_it;
 		}
 
@@ -518,8 +558,17 @@ int login_main(int argc UNUSED_PARAM, ch
 		pause_after_failed_login();
 		/* TODO: doesn't sound like correct English phrase to me */
 		puts("Login incorrect");
+#ifndef CONFIG_FEATURE_IP_BLOCKD
 		syslog(LOG_WARNING, "invalid password for '%s'%s",
 					username, fromhost);
+#else
+		push_log("Bad password attempt for %s%s", username, fromhost);
+
+		if (opt_host) {
+			block_ip(opt_host, opt_port);
+		}
+#endif // CONFIG_FEATURE_IP_BLOCKD
+
 		if (++count == 3) {
 			if (ENABLE_FEATURE_CLEAN_UP)
 				free(fromhost);
@@ -577,11 +626,22 @@ int login_main(int argc UNUSED_PARAM, ch
 	}
 #endif
 
+#ifdef CONFIG_FEATURE_IP_BLOCKD
+	/* Tell ip_blockd to unblock host, if provided. */
+	if (opt_host) {
+		unblock_ip(opt_host, opt_port);
+	}
+#endif // CONFIG_FEATURE_IP_BLOCKD
+
 	if (access(".hushlogin", F_OK) != 0)
 		motd();
 
 	if (pw->pw_uid == 0)
+#ifndef CONFIG_FEATURE_IP_BLOCKD
 		syslog(LOG_INFO, "root login%s", fromhost);
+#else
+		push_log("Password auth succeeded for %s%s", username, fromhost);
+#endif // CONFIG_FEATURE_IP_BLOCKD
 
 	if (ENABLE_FEATURE_CLEAN_UP)
 		free(fromhost);
@@ -616,3 +676,124 @@ int login_main(int argc UNUSED_PARAM, ch
 
 	/* return EXIT_FAILURE; - not reached */
 }
+
+#ifdef CONFIG_FEATURE_IP_BLOCKD
+void fix_mapped_ip(char *host){
+	char *host_copy = strdup(host);
+	char *token	= strtok(host_copy, ":");
+	while (token != NULL) {
+		strncpy(ip_address,token,sizeof(ip_address));
+		token = strtok(NULL, ":");
+	}
+	free(host_copy);
+}
+
+/* Calls ip_block unblock to clear the IP that just connected */
+void unblock_ip(char* host, char *port)
+{
+	struct ubus_context *ubus;
+	struct blob_buf b = { 0 };
+	uint32_t id	  = 0;
+	int ret		  = 0;
+
+	ubus = ubus_connect(NULL);
+
+	if (!ubus) {
+		syslog(LOG_ERR, "Failed to connect to ubus");
+		goto end;
+	}
+
+	if (!port){
+		goto end;
+	}
+
+	if (strstr(host,".")){ //if host is IPv4 mapped IPv6 address
+		fix_mapped_ip(host);
+	} else {
+		strncpy(ip_address,host,sizeof(ip_address));
+	}
+
+	ret = ubus_lookup_id(ubus, "ip_block", &id);
+	if (ret) {
+		syslog(LOG_ERR, "Failed to find 'ip_block' object");
+		goto end;
+	}
+	blob_buf_init(&b, 0);
+	blobmsg_add_string(&b, "ip", ip_address);
+	blobmsg_add_string(&b, "port", port);
+	ubus_invoke(ubus, id, "unblock", b.head, NULL, NULL, 1000);
+
+end:
+	blob_buf_free(&b);
+	ubus_free(ubus);
+}
+
+void block_ip(char* host, char *port)
+{
+	struct ubus_context *ubus;
+	struct blob_buf b = { 0 };
+	uint32_t id	  = 0;
+	int ret		  = 0;
+
+	ubus = ubus_connect(NULL);
+
+	if (!ubus) {
+		syslog(LOG_ERR, "Failed to connect to ubus");
+		goto end;
+	}
+
+	if (!port){
+		goto end;
+	}
+
+	if (strstr(host,".")){ //if host is IPv4 mapped IPv6 address
+		fix_mapped_ip(host);
+	} else {
+		strncpy(ip_address,host,sizeof(ip_address));
+	}
+
+	ret = ubus_lookup_id(ubus, "ip_block", &id);
+	if (ret) {
+		syslog(LOG_ERR, "Failed to find 'ip_block' object");
+		goto end;
+	}
+	blob_buf_init(&b, 0);
+	blobmsg_add_string(&b, "ip", ip_address);
+	blobmsg_add_string(&b, "port", port);
+	ubus_invoke(ubus, id, "push", b.head, NULL, NULL, 1000);
+
+end:
+	blob_buf_free(&b);
+	ubus_free(ubus);
+}
+
+static void push_log(char *format, ...)
+{
+
+	struct ubus_context *ubus = NULL;
+	ubus = ubus_connect(NULL);
+
+	if (!ubus) {
+		syslog(LOG_ERR, "Failed to connect to ubus");
+		return;
+	}
+
+	char el_text[200 + 1] = { 0 };
+	struct events_log el		      = {
+		 .table	   = LLOG_CONNECTIONS,
+		 .sender   = "Login",
+		 .text	   = el_text,
+		 .priority = EVENTLOG_NOTICE,
+		 .db_flag  = 1,
+	};
+
+	va_list ap;
+	va_start(ap, format);
+	vsnprintf(el.text, 200, format, ap);
+	va_end(ap);
+	llog_add_task(ubus, &el);
+
+	ubus_free(ubus);
+
+}
+#endif // CONFIG_FEATURE_IP_BLOCKD
--- a/networking/telnetd.c
+++ b/networking/telnetd.c
@@ -155,6 +155,9 @@ struct globals {
 	struct tsession *sessions;
 	const char *loginpath;
 	const char *issuefile;
+#if ENABLE_FEATURE_TELNETD_STANDALONE
+	const char *port;
+#endif
 	int maxfd;
 } FIX_ALIASING;
 #define G (*(struct globals*)bb_common_bufsiz1)
@@ -426,7 +429,7 @@ make_new_session(
 #if !ENABLE_FEATURE_TELNETD_STANDALONE
 	enum { sock = 0 };
 #endif
-	const char *login_argv[2];
+	const char *login_argv[6];
 	struct termios termbuf;
 	int fd, pid;
 	char tty_name[GETPTY_BUFSIZE];
@@ -513,8 +516,16 @@ make_new_session(
 
 	pid = getpid();
 
+	/* Acquire simple hostname */
+	len_and_sockaddr *lsa = get_peer_lsa(sock);
+	char *ipaddr = NULL;
+	if (lsa) {
+		ipaddr = xmalloc_sockaddr2dotted_noport(&lsa->u.sa);
+		free(lsa);
+	}
+
 	if (ENABLE_FEATURE_UTMP) {
-		len_and_sockaddr *lsa = get_peer_lsa(sock);
+		lsa = get_peer_lsa(sock);
 		char *hostname = NULL;
 		if (lsa) {
 			hostname = xmalloc_sockaddr2dotted(&lsa->u.sa);
@@ -556,13 +567,29 @@ make_new_session(
 
 	/* Exec shell / login / whatever */
 	login_argv[0] = G.loginpath;
-	login_argv[1] = NULL;
+	login_argv[1] = "-h";
+	login_argv[2] = ipaddr;
+	login_argv[3] = NULL;
+#if ENABLE_FEATURE_TELNETD_STANDALONE
+	if (G.port) {
+		login_argv[3] = "-P";
+		login_argv[4] = G.port;
+		login_argv[5] = NULL;
+	}
+#endif
 	/* exec busybox applet (if PREFER_APPLETS=y), if that fails,
 	 * exec external program.
 	 * NB: sock is either 0 or has CLOEXEC set on it.
 	 * fd has CLOEXEC set on it too. These two fds will be closed here.
 	 */
 	BB_EXECVP(G.loginpath, (char **)login_argv);
+	free(ipaddr);
+#if ENABLE_FEATURE_TELNETD_STANDALONE
+	if(G.port) {
+		free(G.port);
+		G.port = NULL;
+	}
+#endif
 	/* _exit is safer with vfork, and we shouldn't send message
 	 * to remote clients anyway */
 	_exit(EXIT_FAILURE); /*bb_perror_msg_and_die("execv %s", G.loginpath);*/
@@ -701,6 +728,7 @@ int telnetd_main(int argc UNUSED_PARAM,
 		logmode = LOGMODE_SYSLOG;
 	}
 #if ENABLE_FEATURE_TELNETD_STANDALONE
+	G.port = strdup(opt_portnbr);
 	if (IS_INETD) {
 		G.sessions = make_new_session(0);
 		if (!G.sessions) /* pty opening or vfork problem, exit */
